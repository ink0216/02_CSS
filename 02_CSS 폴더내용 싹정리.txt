 font-size : 18px;
            font-family : '궁서체' ; 
            color : blueviolet/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
             /* 글자색 */
        }
        code{
            background-color : lightcoral;
            /* 배경색(형광펜) */
            display : block;
            font-weight : bold;
//////////////////////////////////////////////////////////
* 웹 폰트 적용하기(눈누) */
        @font-face {
    font-family: 'SOYOMapleBoldTTF';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2310@1.0/SOYOMapleBoldTTF.woff2') format('woff2');
    font-weight: 700;
    font-style: normal;
} /* 이제 이 폰트 사용할 준비 됐어 */
*{font-family: 'SOYOMapleBoldTTF';}
/////////////////////////////////////////////////////////////
/* CSS 적용 우선순위
1. 선택자 범위가 작은 선택자가 범위가 상대적으로 큰 선택자보다 우선순위를 갖는다
(!important > 인라인스타일 > 아이디 > 클래스 > 태그 > 모든 요소(*))
2. 같은 부분에 같은 선택자가 중복된 경우 마지막에 작성된 CSS가 적용된다 */
/////////////////////////////////////////////////////////////////////////////////////////////////////
 <h3>태그 선택자</h3>
    <pre>
        -현재 문서 내에 특정 태그를 모두 찾아 선택하는 선택자
        h1 태그들을 찾아서 그 색만 빨간색으로 바꾸기
        
        <strong>[작성법]</strong>
        
        <code>태그명 {css코드;}</code> <!-- code태그 == p태그 -->
////////////////////////////////////////////////////////////////////////////////////
<h3> id(#) 선택자</h3>
<!-- ol>li*3#li${id 선택자 테스트 $} -->
    <ol>
        <li id="li1">id 선택자 테스트 1</li>
        <li id="li2">id 선택자 테스트 2</li>
        <li id="li3">id 선택자 테스트 3</li>
    </ol>
<h3>class(.) 선택자</h3>
 <!-- id는 하나만 선택하는 요소이고, class는 여러 개도 선택 가능한 요소 -->
 ***요소에 CSS를 적용하기 위해 선택자를 작성할 때
        id 선택자보다 class선택자를 이용하는 것이 좋다!! *** 
        (id는 하나밖에 못해서 범용성 떨어지고,
        id 속성 자체가 CSS에서 보다 JS에서 많이 사용되기 때문!)
<h3>모든 요소 선택자(*, asterisk)</h3>
      <pre>
        단독 사용 시 : 문서에 존재하는 모든 요소를 선택자로 기능

        다른 선택자와 혼용 사용 시 : 선택된 요소의 모든 자식/후손/형제를 의미 
      </pre>
//////////////////////////////////////////////////////////////////////////////////////////////////
<!-- link태그: 외부 CSS파일과 연결하는 태그 -->
        <!-- rel(relationship) : 연결하려는 외부의 파일이 어떤 종류의 파일인지
        (현재 HTML과 무슨 관계인지, HTML꾸며주는 시트지에요 stylesheet) -->
        <!-- href : 참조하려는 파일의 위치(주소, 경로) -->
        <!-- <link rel="stylesheet" href="../css//02_CSS선택자2.css"> -->
<h4>name 속성 선택하기(name은 html에 기본적으로 존재하는 속성)</h4>
     <!-- div*4[name=name-]{div$} -->
     <!-- 동명이인 있어도 됨 -->
    <div name="name-1" >div1</div>
    <div name="name-1" >div2</div>
   <h4>data 속성 선택하기(data는 html의 기본속성이 아님)근데 선생님이 그냥 쓴거임 마음대로 내가 추가해서 써도 적용됨</h4>
    <!-- p*4[data=data-]{p$} -->
    <p data="data-1">p1</p>
    <p data="data-1" name="name-1" >p2</p>
    <p data="data-2" name="name-1" >p3</p>
////////////////////////////////////////////////////////////////
> : 자식 선택자
 : 동격 선택자?동위선택자?(한 칸 공백 스페이스바)
////////////////////////////////////////////////////////////////////
 <h1>반응 선택자</h1>
      <pre>
        사용자의 움직임에 반응하여 스타일이 변경되게 하는 선택자
        특정 움직임(클릭 등)에 반응
        
        선택자는 여러 종류가 있는데 일단 그 중 두개만!
        
        선택자 종류1 : active -> 선택된 요소가 클릭 되고 있을 때 반응
        
        선택자 종류2 : hover -> 선택된 요소 위에 마우스 커서가 올라갔을 때 반응
////////////////////////////////////////////////////////////////////////////////////////////////
<h1>상태 선택자</h1>
      <pre>
        입력 양식(input, input 관련 태그)의 
        상태에 따라 선택되는 선택자

        : focus  ->요소에 초점이 맞춰졌을 때 
                   (input 요소를 클릭해서 입력 커서가 깜박이며 
                   입력할 준비가 되었을 때)
        : checked ->요소가 체크 되었을 대(radio, checkbox에만 사용할 수 있는 선택자)

        : enabled / :disabled ->요소가 활성/비활성화 되었을 때
        disabled는 입력을 아예 못하게 만드는 것(제출도 불가)
      </pre>

      <h5>:focus</h5>
      아이디 입력 : <input type="text" id="input1">

      <h5>:checked</h5>
      <input type="checkbox" id="input2">

      <h5>:enabled / :disabled</h5>
<br>
      <input type="text" class="input3"enabled>
      <br>
      <input type="text" class="input3" disabled>
/////////////////////////////////////////////////////////////////////////
<h1>동위 선택자</h1>
<pre>
  동위(동등한 위치, )관계에서
  다음(뒤)에 위치한 요소를 선택하는 선택자
  앞에 위치한 요소는 선택할 수 없음

  A 
  B 
  B 

  1) A 바로 다음에 위치한 B 요소 하나만을 선택하겠다
    -> + 기호를 사용
  <code>
    A선택자 + B선택자 {CSS 코드}
  </code>

  2) A 바로 다음에 위치한 B 요소 모두를 선택하겠다
    -> ~ (Tilde)기호를 사용
  <code>
    A선택자 ~ B선택자 {CSS 코드}
  </code>
///////////////////////////////////////////////////////////
/* 선택자[속성명="속성값"]{CSS 코드;} */
div[name="name-1"]{background-color: green;}
//////////////////////////////////////////////////////////////
/* #activeBox가 클릭되고 있을 때만 노랑으로 바뀌게 하려면 아래처럼... */
#activeBox:active{
    background-color: yellow;
}
/* #hoverBox에 마우스가 올라왔을 때 */

/* #hoverBox:hover{
    background-color: pink;
} */
////////////////////////////////////////////////////////////
cursor: pointer;  
/* 마우스 포인터 모양을 손가락으로 변경 */
border-radius : 20%;
user-select: none; /* 오른쪽 네모 클릭하면 왼쪽네모와의 사이에 파란색 나오는 것 방지 */
/* 사용자가 선택을 못하게 함 */
////////////////////////////////////////////////////////
/* -------------동위 선택자------------ */

/* + : 바로 뒤 형제요소 하나 선택하는 것 */
#div1 + div{
    background-color: yellow;
}
/* #div + dov{
    background-color: yellow;
}  : */

/* ~ : 뒤에 존재하는 형제 요소들 중 해당하는 요소들을 다 선택하는 것 */
/* 4번 5번만 선택하고 싶다 */
/* #div3 ~div{
    background-color: springgreen;
} :  div3의 뒤에 있는 형제요소 중에서 중간의 p 태그 말고 div 태그만 선택하겠다*/
#div3 ~div{
    background-color: springgreen;
///////////////////////////////////////////////////////////////////////
 <h1>문자열 속성(시작태그에 적는 것) 선택자</h1>

  <pre>
    속성 값의 문자열을 확인하여 스타일 적용하는 방식의 선택자.
    문자열의 모양을 보고 선택하겠다
   

    1) 선택자[속성명 ~= "특정값"] { CSS 코드; }
        -> 띄어쓰기로 구분되어있는 여러 속성 값이 작성된 속성 중
        속성 값이 특정 값을 단어로 포함하는 요소를 선택

    2) 선택자[속성명 |= "특정값"] { CSS 코드; }
        -> 속성 값이 특정 값을 단어로 포함하는 요소를 선택
        단, "-" 기호로 구분, "-" 앞의 내용이 동일해야 한다.
        <!--| 버티컬 바  -->
        

    3) 선택자[속성명 ^= "특정값"] { CSS 코드; }   
        (^ : 캐럿, 시작을 의미)
        -> 속성 값이 특정 값으로 시작하는 요소를 선택

    4) 선택자[속성명 $= "특정값"] { CSS 코드; }
        ($ : 끝을 의미)
        -> 속성 값이 특정 값으로 끝나는 요소를 선택

    5) 선택자[속성명 *= "특정값"] { CSS 코드; }
        -> 속성 값이 특정 값을 포함하는 요소를 선택
//////////////////////////////////////////////////////////////
 <h1>일반 구조(위치) 선택자</h1>
    <!-- html의 구조를 이용해서 선택하겠다 -->
    <pre>
        형제 관계에 있는 요소 중에서 
        
        특정 요소만을 선택하는 선택자

        * 중요 * 
        -위치를 기준으로 구분함!! 

        제공되는 것은 총 네 종류
        (A : 선택된 요소)
        A:first-child : 형제들 중 첫 번째가 A가 맞다면 선택을 해라
                        형제들 중 첫 번째가 A가 아니라면 선택 안함
        A:last-child : 형제들 중 마지막이 A가 맞다면 선택을 해라
                        형제들 중 마지막이 A가 아니라면 선택 안함
                        
        A:nth-child(숫자 또는 수열) : 형제들 중 첫 번째 부터 세어서 n번째가 A가 맞다면 선택을 해라
        
        A:nth-last-child(숫자 또는 수열) : 형제들 중 뒤에서부터 세어서 n번째가 A가 맞다면 선택을 해라
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 <h1>형태 구조 선택자</h1>

    <pre>
        선택된 형제 관계 요소 중 특정 요소를 선택하는 선택자.
    
        (선택된 요소들을 기준으로 구분)
    
        :first-of-type : 같이 선택된 형제들 중에서 첫 번째 요소
        :last-of-type : 같이 선택된 형제들 중에서 마지막 요소
        :nth-of-type(수열) : 같이 선택된 형제들 중에서 수열 번째 모든 요소
        :nth-last-of-type(수열) : 같이 선택된 형제들 중에서 뒤에서 수열 번째 모든 요소
      </pre>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
 <h1>부정 선택자( :not() )</h1>
        <!-- 부정 == 반대 -->
    <pre>
        <code>
            A:not(B)

            '선택된 모든 A 중 B만 빼고'
        </code>

    </pre>
//////////////////////////////////////////////////////////
 <h3> :only-child </h3>
    <p>
       특정 요소의 자식 요소가 하나 밖에 없을 때 선택 

    </p>
///////////////////////////////
<h3>:only-of-type</h3>
<p>
    특정 요소의 자식 중 
    지정된 자식 요소가 딱 하나만 있을 때 선택
</p>
//////////////////////////////////////////////////////////////
<h3> :empty </h3>
<p>
    자식 노드가 없는 요소인 경우에 선택
    <br>
    노드 : HTML에 작성되어지는 모든 것들
    태그 없이 글 쓴 것도 텍스트 노드
    주석, 태그, 빈칸도 다 노드임
    <br>
    ex) 태그, 글자, 띄어쓰기, 엔터, 주석 등 모두 다
    <br>
    근데 :empty는 
    시작 태그와 종료 태그 사이에 아무것도 존재하지 않을 때만 선택
</p>
////////////////////////////////////////////////////////////////////////////////////////
<h1>여러 선택자 동시 작성하기</h1>

<pre>
    같은 스타일(css코드)을 지정하고 싶은 요소가 있으나
    선택자 하나로 원하는 요소를 모두 선택할 수 없는 경우에 사용

    <strong>작성법</strong>
    <code>
        선택자1, 선택자2, 선택자3, ... {CSS 코드}

    </code>


</pre>
////////////////////////////////////////////////////////////////////////////////////
<h1>여러 클래스가 작성된 요소만 선택하기</h1>

    
    <!-- ul>li*3.test6{테스트} -->
    <ul>
        <li class="test6">테스트1</li>
        <li class="test6 aaa" >테스트2</li>
        <li class="aaa">테스트3</li>
    </ul>
    <ul>
        <li class="test6">테스트4</li>
        <li class="test6 aaa">테스트5</li>
        <li class="aaa">테스트6</li>
    
        <li class="test6">
          <strong class="aaa">주의!!</strong>
        </li>
      </ul>
/* class 속성 값으로 test6, aaa 둘 다 가지고 있는 요소만 선택하려면?
클래스 선택자를 띄어쓰기 안하고 다 붙여서 쓰면 됨 */
/* 주의사항 : 클래스 선택자 사이에 띄어쓰기 하면 
그게 test6의 후손 중에서 class가 aaa인 것에 적용하라는 뜻 됨 */
/* 띄어쓰기는 후손 선택자이기 때문에 */
//////////////////////////////////////////////////////////////////////////////////////////
 <h1>CSS 선택자의 우선 순위</h1>

  <pre>
    기본적으로 css 속성은 style태그 또는 css 파일에 
    작성된 순서(위->아래)대로 해석이 진행 되지만

    같은 요소에 여러 css 속성이 설정되는 경우 우선 순위가 적용된다.

    * 알아둬야 될것 
    1) 같은 요소에 동일한 우선 순위로만 css 속성이 설정된 경우
      -> 제일 마지막에 작성된 css 속성이 반영된다(덮어쓰기 됨)

    2) 여러 선택자를 이용해서 같은 요소를 선택하더라도
        지정되는 css 속성(글자색상, 글자크기 등)이 다르면
        모두 반영된다.(누적되어 반영)

    1순위 : css속성 : 속성값 !important;
    2순위 : inline-style 속성 (요소 태그 부분에 직접 작성되는 style 속성)
    3순위 : 아이디 선택자 (#아이디 속성명)
    4순위 : 클래스 선택자 (.class 속성명)
    5순위 : 태그 선택자  (태그명)
///////////////////////////////////////////////////////////////////////////////////////
<h1>레이아웃(layout)</h1>
 요소가 화면에 어떻게 보여질 지 형식을 지정하는 속성

    - block : 화면을 수직 분할(행을 나눔, 한 블럭이 한 줄 다 차지, 아파트 층 나누기)
        + width, height 지정 가능

    - inline : 화면을 수평 분할(하나의 행의 열을 나눔 == 글자, 문자열 생각 아파트 호수 나누기)
        + width, height 지정 불가능!

    - inline-block : inline의 수평 분할 + block의 width, height 지정
    (인라인처럼 옆으로 되는데 블럭처럼 크기조절 하고 싶을 때)

    - none : 요소는 존재하나 화면에는 보이지 않게 함 (체크박스 할 때)

    - flex : 요소의 정렬되는 방향, 요소간의 간격을 유연하게 처리하는 형식 (1차원)
    (3분할 원할 때 수치 안재고 flex쓰면 알아서 삼등분 해줌)(가장 많이 사용)
    - grid : 격자무늬 형식으로 화면을 쉽게 분할하는 형식(2차원)
///////////////////////////////////////////////////////////////////////////////////////////
<h3>block 형식의 요소를 inline 형식으로 변경하기</h3>
<div class="block area1 inline">1번 영역</div>
//////////////////////////////////////////////////////////////////////////////
<h3>inline 형식의 요소를 block 형식으로 변경하기</h3>
<!-- span: inline 형식의 대표적 요소 -->
 <!-- span*5하면 가로로 배열됨 세로로 하려면 이렇게! -->
    <!-- 설정-emmet 검색- emmet syntax prifiles- 편집- 파일열리는데
    -emmet.syntaxProfiels 중괄호 안에-
"html": {"inline_break" : 1} 넣고 저장하면 됨 -->
//////////////////////////////////////////////////////////////////////
<!-- inline, inline-block은 글자로 생각해야 편하다 -->
<!-- inline-block 형식의 요소가 아래 처럼 줄이 바뀐 상태로 작성되면
요소 사이에 띄어쓰기 한 칸씩 추가된다 -->
///////////////////////////////////////////////////////////////////
<!-- 3번은 안보이게 하고 싶으면 
    class가 none인 것은 display를 none으로 하라고 CSS했으니까
    뒤에 none 추가해주면 됨 -->
//////////////////////////////////////////////////////
<!-- container : 감싸는 것 -->
<레이아웃 스타일1까지 완료>
//////////////////////////////////////////////////////////////
<h1>요소의 영역(여백) 관련 스타일</h1>

  <pre>
    HTML 요소는 총 4가지의 영역으로 구성되어 있음

    1. content(내용) 영역
      - 요소의 내용이 작성 되어지는 영역
      (시작태그와 종료태그 사이에 작성되는 내용을 생각하면 된다)

    2. padding
      - content와 border 사이의 공간

    3. border(테두리) 영역
      - 요소의 테두리가 지정되는 영역
      - content 보다 바깥쪽에서 content를 감싸고 있음
    
    4. margin(여백, 간격)
      - 다른 요소와의 간격을 나타내는 영역
////////////////////////////////////////////////////////////////////////
 box-sizing
  
      - width/height 크기 조정 속성의 범위를 지정하는 css 속성
  
      1) content-box
        - width/height 지정 시 content 영역의 크기만 그렇게 변한다
          (기본값)
  
      2) border-box
        - width/height 지정 시
        content + padding + border의 크기를 합산한 결과가
        작성된 width/height와 같아지도록
        content 영역의 크기를 자동으로 조정
        <!-- width가 100이고 padding과 border 두께가 10px일 때
        자동으로 content의 width를 계산해서 하도록  -->
    </pre>
/////////////////////////////////////////////////////////////////////////////
<h3>margin(여백, 남기다, 다른 요소와의 간격, 거리) 영역</h3>
<pre>
    margin 영역은 다른 요소의 margin과 겹칠 수 있다
    이때, 더 큰 margin값을 가지는 요소의 margin에 맞춰 간격이 벌어진다.
    학교에서 양 팔 벌리면, 팔 긴 친구 길이에 맞춰 하는 것이 적절
//////////////////////////////////////////////////////////////////////////////////////
<h1>padding, margin, border의 방향성</h1>
<!-- 얘네들은 상하좌우의 길이를 각각 다르게 설정 가능 -->

<pre>
    (OOO (대문자 O)== padding, margin, border가 들어갈 자리)

    OOO-top : 크기->위쪽 방향의 두께 지정
    OOO-bottom : 크기->아래쪽 방향의 두께 지정
    OOO-left : 크기->왼쪽 방향의 두께 지정
    OOO-right: 크기->오른쪽 방향의 두께 지정

    단, border의 속성 값은 [크기 모양 색상] 형식으로 써야함
</pre>
//////////////////////////////////////////////////////////////////////////////////
<!-- border-width: 테두리의 두께 -->
<h1>padding, margin, border-width 크기 한번에 지정하기</h1>
네 방향으로 네 번 따로 안말하고 한번에 지정하기
<pre>
    padding, margin, border-width : 속성값(크기)
    
    속성 값을 1개만 쓴 경우 : 상하좌우에 다 적용됨
    속성 값을 2개를 쓴 경우 : 상하 /좌우 
    속성 값을 3개를 쓴 경우 : 상/ 좌우/ 하
    속성 값을 4개를 쓴 경우 : 상/ 우/ 하/ 좌 (시계방향 순서!)(상하좌우 순서 아님!)

</pre>
/////////////////////////////////////////////////////////////////////////////
<h2>margin : auto;</h2>
<pre>
    다른 요소와의 간격을 자동으로 지정하여 
    가운데 정렬되도록 만드는 속성 값
    -A 와 B 사이에 C가 들어올 때 
     C 가 자동으로 그 둘의 중점으로 들어오도록 지정
     속성값이 하나(auto)여서 상하좌우에 다 적용될 것 같지만
     보통 좌우 간격에만 지정됨
     -지정되는 대상은 block 형식(글자가 아닌)의 요소여야 한다
     (inline, inline-block은 
     text-align : center;를 쓰면 됨
     text-align ==글자 정렬)
</pre>
///////////////////////////////////////////////////////
 /* 모든 요소(*)에 
    width/height가 설정될 때
    content= width/height-2(border + padding)
    한 크기로 자동 계산해서 설정
    ->생각한 크기 안에 테두리 포함해서 모든 요소를 넣을 수 있도록 */
/////////////////////////////////////////////////////////////////////////////////////////
 box-sizing: border-box; 
   /* 우리가 80 계산해서 줄이기 싫으니까 너가 계산해서 해 */
   /* padding과 border는 너비에 양쪽으로 두 번 들어감 */
///////////////////////////////////////////////////////////////////////////
.content{
    width: 150px;
    height: 150px;
/* width/height 설정 값이 content 영역에만 적용되도록 변경 */
    box-sizing: content-box;
}
//////////////////////////////////////////////////////////////////////
.padding{
    width: 200px;
    height: 200px;
    background-color: lightgreen;
/* 상하좌우 content, border 사이에 20px을 끼움 */
/* 내용이 테두리에 딱 붙어있지 않고 떨어져 있음 */
    padding: 20px; 
}
/////////////////////////////////////////////////////////////////////
.margin{
    /* 상하좌우 다른 요소(부모, 형제 요소 등)와도 거리두려고 함 */
    /* body 태그로 부터도 50px 만큼 떨어지려고 함 */
    margin : 50px;
}
////////////////////////////////////////////////////////////////////////////////
<h1>요소 정렬 스타일(float / clear)</h1>
    <pre>
        float(뜨다, 띄우다, 뜨는 물건) :
        요소(태그 세트 전체)를 띄워서 좌/우로 정렬하는 속성
        왼쪽으로 흐르는 물에 띄우면 왼쪽정렬
        반대는 반대 정렬

        HTML도 포토샵처럼 여러 레이어를 겹쳐 구성
        (float가 지정되지 않은 요소와, 
        float가 지정된 요소가 겹치는 문제 발생->clear로 해결가능
        어떤 애는 떠 있고 어떤 애는 안떠있고)

    clear : float로 인해 띄워져 있는 상태를 해제하는 속성
    (같은 층으로 내려주어 요소 겹침 문제를 해결) 

clear-left 하면 float-left들과 겹치지 않게 됨 float-right들과는 겹칠 수 있음
clear-right 하면 float-right들과 겹치지 않게 됨 float-left들과는 겹칠 수 있음
clear-both하면 clear-left, clear-right들과 모두 안겹치게 됨'

/* 하나의 요소에 동일한 css 속성을 여러 번 지정할 수 없다 
-> 여러 번 작성하면 마지막으로 작성된 속성값으로 덮어씌워진다*/
/* 그래서 clear:left와 clear:right로 두번 하면 안되고
둘다 한번에 할 수 있는 clear:both로 해야한다 */
///////////////////////////////////////////////////////////////////////////////////
<h3>4분할 (田)</h3>
  <div class="container">
    <!-- 1행 -->
    <div class="row row-5">
      <div class="col col-5 bg-7"></div>
      <div class="col col-5 bg-3"></div>
    </div>

    <!-- 2행 -->
    <div class="row row-5">
      <div class="col col-5 bg-1"></div>
      <div class="col col-5 bg-4"></div>
    </div>
  </div>





////////////////////////////////////////////////////////////////////////////////////
 <!-- float로 네 영역을 다 left 정렬 해두고
자리 넘어가면 자동으로 아래 행으로 넘어감 -->
<!-- float된 요소가 부모 요소 영역을 벗어나게 생긴 경우
 자동으로 다음 줄로 이동된다(줄바꿈) -->
<div class="container">
    <div class="col col-5 row-5 bg-1"></div>
    <div class="col col-5 row-5 bg-2"></div>
    <div class="col col-5 row-5 bg-3"></div>
    <div class="col col-5 row-5 bg-4"></div>
</div>
/////////////////////////////////////////////////////////////////////
.float-left{
    width: 50px;
    height: 50px;
    float: left; /* 왼쪽 흐름으로 띄워서 왼쪽으로 정렬 시킴 */
    background-color: pink;
}
/* div는 block 성질 있어서 아래로 정렬되지만
float 정렬 시 div의 block형식이 해제돼서 한 줄을 차지하지 않고
1,2,3,4가 가로로 정렬됨 */
//////////////////////////////////////////////////////////////////////////////////
.float-right{
    width: 30px;
    height: 30px;
    background-color: yellow;
    float: right;
    /* 얘네만 물 위에 떠서 오른쪽으로 쏠려 가서 정렬됨 */
    /* 가장 먼저 작성된 요소가 오른쪽에 있다 */
///////////////////////////////////////////////////////////////////////////////////////

/* 클래스 기반 CSS(스타일) */
  /* 원래는 html 먼저 쓰고 css에 썼는데
  반대로 css에 왕창 써두고 html에서 뽑아서 가져다 쓰면 됨 */
    .bg-1{background-color: red;}
    .bg-2{background-color: orange;}
    .bg-3{background-color: yellow;}
    .bg-4{background-color: green;}
    .bg-5{background-color: blue;}
    .bg-6{background-color: navy;}
.bg-7{background-color: purple;}

/* 열(column)을 나타내는 요소에 꼭 작성되어야 하는 클래스 */
.col{
    height: 100%;
    float: left;
}

.col-1{width: 10%;}
.col-2{width: 20%;}
.col-3{width: 30%;}
.col-4{width: 40%;}
.col-5{width: 50%;}
<레이아웃 스타일3까지 완료>








































    

